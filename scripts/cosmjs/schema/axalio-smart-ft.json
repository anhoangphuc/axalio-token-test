{
  "contract_name": "axalio-smart-ft",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "airdrop_amount",
      "initial_amount",
      "precision",
      "subunit",
      "symbol"
    ],
    "properties": {
      "airdrop_amount": {
        "$ref": "#/definitions/Uint128"
      },
      "initial_amount": {
        "$ref": "#/definitions/Uint128"
      },
      "precision": {
        "type": "integer",
        "format": "uint32",
        "minimum": 0.0
      },
      "subunit": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "mint_for_airdrop"
        ],
        "properties": {
          "mint_for_airdrop": {
            "type": "object",
            "required": [
              "amount"
            ],
            "properties": {
              "amount": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "receive_airdrop"
        ],
        "properties": {
          "receive_airdrop": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "minted_for_airdrop"
        ],
        "properties": {
          "minted_for_airdrop": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "minted_for_airdrop": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AmountResponse",
      "type": "object",
      "required": [
        "amount"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "token": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenResponse",
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "$ref": "#/definitions/Token"
        }
      },
      "definitions": {
        "Token": {
          "type": "object",
          "required": [
            "burn_rate",
            "denom",
            "issuer",
            "precision",
            "send_commission_rate",
            "subunit",
            "symbol",
            "version"
          ],
          "properties": {
            "burn_rate": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "features": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "issuer": {
              "type": "string"
            },
            "precision": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "send_commission_rate": {
              "type": "string"
            },
            "subunit": {
              "type": "string"
            },
            "symbol": {
              "type": "string"
            },
            "version": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      }
    }
  }
}
