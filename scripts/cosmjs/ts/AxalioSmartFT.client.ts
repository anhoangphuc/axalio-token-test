/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, AmountResponse, TokenResponse, Token } from "./AxalioSmartFT.types";
export interface AxalioSmartFtReadOnlyInterface {
  contractAddress: string;
  token: () => Promise<TokenResponse>;
  mintedForAirdrop: () => Promise<AmountResponse>;
}
export class AxalioSmartFtQueryClient implements AxalioSmartFtReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.token = this.token.bind(this);
    this.mintedForAirdrop = this.mintedForAirdrop.bind(this);
  }

  token = async (): Promise<TokenResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token: {}
    });
  };
  mintedForAirdrop = async (): Promise<AmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minted_for_airdrop: {}
    });
  };
}
export interface AxalioSmartFtInterface extends AxalioSmartFtReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mintForAirdrop: ({
    amount,
    userAddr
  }: {
    amount: Uint128;
    userAddr: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  receiveAirdrop: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AxalioSmartFtClient extends AxalioSmartFtQueryClient implements AxalioSmartFtInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintForAirdrop = this.mintForAirdrop.bind(this);
    this.receiveAirdrop = this.receiveAirdrop.bind(this);
  }

  mintForAirdrop = async ({
    amount,
    userAddr
  }: {
    amount: Uint128;
    userAddr: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_for_airdrop: {
        amount,
        user_addr: userAddr
      }
    }, fee, memo, _funds);
  };
  receiveAirdrop = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_airdrop: {}
    }, fee, memo, _funds);
  };
}